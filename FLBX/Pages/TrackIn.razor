@page "/trackIn"

@inject FxUtil fxUtil
@inject IJSRuntime jsRuntime;

@implements Microsoft.AspNetCore.Components.IComponent
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Layouts

@using System.Text.Json
@using FLBX.Components
@using FLBX.Models

@inject MessageService messageService

<FLBX.Components.FxFilterGroup>

    <div class="row">
        <FxDateRangePicker @ref="@filterDate" MediumColSpanValue="3" Placeholder="생산시작일(기간)" Onclose="@OncloseDate" OnValueChanged="@OnValueChange"></FxDateRangePicker>
        <FxDropDown @ref="@filterWorkOrder" DataSourceValue="@Workorders" MediumColSpanValue="3" Placeholder="Work Order"></FxDropDown>
        <FxTextBox @ref="@filterLotId" MediumColSpanValue="3" Placeholder="Lot Id 검색 "> </FxTextBox>
        <FxTextBox @ref="@filterLotName" MediumColSpanValue="3" Placeholder="Lot 이름 검색 "> </FxTextBox>
    </div>
    <div class="row d-flex justify-content-end">
        <div class="p-2">
            <FLBX.Components.FxFilterButtons>
                <SfButton IsPrimary="true" OnClick="@GetLotInfo">조회</SfButton>
                <SfButton CssClass="e-danger" OnClick="@Trackin">작업시작</SfButton>
                <SfButton CssClass="e-danger" OnClick="@Trackout">작업종료</SfButton>
            </FLBX.Components.FxFilterButtons>

            <FxToast @ref="@toast" ToastTitle="Information" ToastTimeOut="3000" ToastContent="@ToastMessage"></FxToast>
        </div>
    </div>

</FLBX.Components.FxFilterGroup>
@*TOP Menu -End- *@

@*Main  Content *@
<div class="row">
    <div class="col-lg-12 px-0">
        <div class="card shadow mb-4 p-3" style="height: 615px;">
            <div class="font-weight-bold text-info mb-1"><i class="fas fa fa-bars pr-1"></i>생산Lot</div>
            <SfGrid ID="LotGrid" @ref="LotGrid" DataSource="@GridDataLot" Toolbar="@(new List<string>() { "Edit", "Update", "Cancel","Search","Print","ExcelExport" })" AllowPaging="true" AllowExcelExport="true">
                <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
                <GridEditSettings ShowDeleteConfirmDialog="true" AllowEditing="true" AllowNextRowEdit="true" AllowEditOnDblClick="false" Mode="EditMode.Normal"></GridEditSettings>
                <GridColumns>
                    <GridColumn Type="ColumnType.CheckBox"></GridColumn>
                    <GridColumn Field=@nameof(LotModel.WORKORDERID ) HeaderText="Workorder Id" EditorSettings="@CustomerEditParams" ></GridColumn>
                    <GridColumn Field=@nameof(LotModel.LOTID ) HeaderText="Lot Id" IsPrimaryKey="true"></GridColumn>
                    <GridColumn Field=@nameof(LotModel.LOTNAME ) HeaderText="Lot Name"></GridColumn>
                    <GridColumn Field=@nameof(LotModel.STATE ) HeaderText="State" EditType="EditType.DropDownEdit">
                        <EditTemplate>
                            <SfDropDownList ID="Segment" @bind-Value="@((context as LotModel).STATE)" Placeholder="Lot state.." TItem="LotModel" TValue="string" DataSource="@stateData">
                                <DropDownListFieldSettings Value="STATE" Text="STATE"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>
                    <GridColumn Field=@nameof(LotModel.QTY ) HeaderText="Qty" TextAlign="TextAlign.Right" ValidationRules="@(new ValidationRules{ Required= true })"></GridColumn>
                    <GridColumn Field=@nameof(LotModel.PRODUCTDEFINITIONID ) HeaderText="Product Id" ValidationRules="@(new ValidationRules{ Required= true })"></GridColumn>
                    <GridColumn Field=@nameof(LotModel.PROCESSDEFINITIONID ) HeaderText="Process Id" ValidationRules="@(new ValidationRules{ Required= true })"></GridColumn>
                    <GridColumn Field=@nameof(LotModel.PROCESSSEGMENTID ) HeaderText="Segment Id" ValidationRules="@(new ValidationRules{ Required= true })"></GridColumn>
                </GridColumns>
            </SfGrid>

        </div>
    </div>
</div>

@*Main  Content End *@

@code {

    #region Components

    FxDateRangePicker filterDate;
    FxDropDown filterWorkOrder;
    FxTextBox filterLotId;
    FxTextBox filterLotName;
    FxToast toast;

    public SfGrid<LotModel> LotGrid { get; set; }

    #endregion

    IEnumerable<DropDownModel> Workorders { get; set; }
    IEnumerable<DropDownModel> State { get; set; }
    List<LotModel> Lots { get; set; }

    public static List<LotModel> stateData = new List<LotModel> {
        new LotModel() { STATE = "Actived" },
        new LotModel() { STATE = "Created" },
        new LotModel() { STATE = "Finished" }
    };

    public string ToastMessage { get; set; }

    void Attach(RenderHandle renderHandle) { }

    async Task SetParametersAsync(ParameterView parameters) { }

    public IEditorSettings CustomerEditParams = new StringEditCellParams
    {
        Params = new TextBoxModel() { Readonly = true }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        base.OnAfterRenderAsync(firstRender);

        //filter 초기값 입력
        if (firstRender)
        {
            //Workorder 생산 시작일 필터
            filterDate.sfDateRangePicker.StartDate = DateTime.Now.AddDays(-14);
            filterDate.sfDateRangePicker.EndDate = DateTime.Now;

            //Workorder 필터
            await GetWorkorders();
            this.filterWorkOrder.sfDropDownList.AddItem(Workorders);
        }
    }

    public List<LotModel> GridDataLot { get; set; }
    private bool isChecked = true;

    protected override void OnInitialized()
    {
        //GridData = WorkOrderDetails.GetAllRecords();
        //GridDataLot = Lot.GetAllRecords();
    }

    private async Task OncloseDate(object args)
    {
        await GetWorkorders();
        this.filterWorkOrder.sfDropDownList.AddItem(Workorders);
    }

    private async Task OnValueChange(object args)
    {
        await GetWorkorders();
        this.filterWorkOrder.sfDropDownList.AddItem(Workorders);
    }

    private async Task GetWorkorders()
    {
        Dictionary<string, object> param = new Dictionary<string, object>();
        param.Add("from", filterDate.sfDateRangePicker.StartDate.Value.ToString("yyyy-MM-dd"));
        param.Add("to", filterDate.sfDateRangePicker.EndDate.Value.ToString("yyyy-MM-dd"));

        //Query Message 생성
        QueryMessage queryMessage = new QueryMessage()
        {
            QueryId = "GetWorkOrderDp",
            QueryType = "Filter",
            QueryVersion = "001",
            SiteId = "A_10",
            ParameterKeyValue = param

        };

        FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMessage, null, null);

        //Message Send
        var task = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
        await Task.WhenAll(task);
        ReplyMessage reply = task.Result;

        //Reply Message Binding
        this.Workorders = JsonSerializer.Deserialize<IEnumerable<DropDownModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
    }

    /// <summary>
    /// GetLotInfo
    /// </summary>
    /// <param name="arg"></param>
    /// <returns></returns>
    private async Task GetLotInfo(MouseEventArgs arg)
    {
        //Parmeter 생성
        Dictionary<string, object> param = new Dictionary<string, object>();
        param.Add("workorder", filterWorkOrder.sfDropDownList.GetItems().FirstOrDefault<DropDownModel>().Id);
        param.Add("lotid", filterLotId.fxTextBox.Value ?? "");
        param.Add("lotname", filterLotName.fxTextBox.Value ?? "");


        //Query Message 생성
        QueryMessage queryMessage = new QueryMessage()
        {
            QueryId = "GetLot",
            QueryType = "Inquiry",
            QueryVersion = "001",
            SiteId = "A_10",
            ParameterKeyValue = param
        };

        FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMessage, null, null);

        //Message Send
        var task = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
        await Task.WhenAll(task);
        ReplyMessage reply = task.Result;

        //Reply Message Binding
        this.GridDataLot = JsonSerializer.Deserialize<List<LotModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
    }

    async Task Trackin(MouseEventArgs arg)
    {
        this.Lots = this.LotGrid.SelectedRecords;
        Console.WriteLine(this.Lots.ToString());

        //Parmeter 생성
        Dictionary<string, object> param = new Dictionary<string, object>();
        param.Add("lot", this.Lots);

        RuleMessage ruleMessage = new RuleMessage()
        {
            RuleName = "TrackIn",
            ParmeterKeyValues = param
        };

        FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, null, ruleMessage, null);

        //Message Send
        var task = messageService.SendMessageAsync("Product", "/api/TrackIn/TrackIn", messageSet);
        await Task.WhenAll(task);
        ReplyMessage reply = task.Result;

        //Reply Message Binding
        string replyMessage = Convert.ToString(reply.ResultKeyValues["reply"]);

        this.ToastMessage = $"TrackIn Lot : {replyMessage} ea";
        await toast.fxToast.Show();
    }

    async Task Trackout(MouseEventArgs arg)
    {
        this.Lots = this.LotGrid.SelectedRecords;
        Console.WriteLine(this.Lots.ToString());

        //Parmeter 생성
        Dictionary<string, object> param = new Dictionary<string, object>();
        param.Add("lot", this.Lots);

        RuleMessage ruleMessage = new RuleMessage()
        {
            RuleName = "TrackOut",
            ParmeterKeyValues = param
        };

        FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, null, ruleMessage, null);

        //Message Send
        var task = messageService.SendMessageAsync("Product", "/api/TrackOut/TrackOut", messageSet);
        await Task.WhenAll(task);
        ReplyMessage reply = task.Result;

        //Reply Message Binding
        string replyMessage = Convert.ToString(reply.ResultKeyValues["reply"]);

        this.ToastMessage = $"TrackOut Lot : {replyMessage} ea";
        await toast.fxToast.Show();
    }

    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        Console.Out.WriteLine("Toolbar Click");
        if (args.Item.Id == "Grid_pdfexport")
        {
            this.LotGrid.PdfExport();
        }
        if (args.Item.Id == "Grid_excelexport")
        {
            this.LotGrid.ExcelExport();
        }
    }

    public class LotModel
    {
        public string LOTID { get; set; }
        public string LOTNAME { get; set; }
        public string STATE { get; set; }
        public string PREVSTATE { get; set; }
        public float QTY { get; set; }
        public string WORKORDERID { get; set; }
        public string SITEID { get; set; }
        public string PRODUCTORDERID { get; set; }
        public string PRODUCTDEFINITIONID { get; set; }
        public string PROCESSDEFINITIONID { get; set; }
        public string SUBPROCESSDEFINITIONID { get; set; }
        public string PROCESSNODEID { get; set; }
        public string PROCESSSEGMENTID { get; set; }
        public string PROCESSSEGMENTRULEID { get; set; }
        public string PROCESSINGSTATE { get; set; }
        public string ISHOLD { get; set; }
        public string ISREWORK { get; set; }
        public string ISRESERVEDFUTUREACTION { get; set; }
        public string MAINPROCESSDEFINITIONID { get; set; }

    }
}