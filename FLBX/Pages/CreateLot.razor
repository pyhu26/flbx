
@inject FxUtil fxUtil
@inject IJSRuntime jsRuntime;

@implements Microsoft.AspNetCore.Components.IComponent
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups

@using System.Text.Json
@using FLBX.Components
@using FLBX.Models
@using System.Collections.Generic

@inject MessageService messageService
@using FLBX.Models


<FLBX.Components.FxFilterGroup>

    <div class="row">
        <FxDateRangePicker @ref="@filterDate" StartDate="@StartDate" EndDate="@EndDate"
                           MediumColSpanValue="3" Placeholder="Workorder 작업 시작 일자"
                           IsMandantory="true" DateTimeChanged="filterDate_ValueChanged"></FxDateRangePicker>
        <FxDropDown @ref="@filterProduct" DataSourceValue="@Products" MediumColSpanValue="3" Placeholder="제품" PopupHeight="500px"></FxDropDown>
        <FxDropDown @ref="@filterPo" MediumColSpanValue="3" Placeholder="Productorder"></FxDropDown>
        <FxTextBox @ref="@filterWoName" MediumColSpanValue="3" Placeholder="Workorder 이름 "> </FxTextBox>
    </div>
    <div class="row d-flex justify-content-end">
        <div class="p-2">
            <FLBX.Components.FxFilterButtons>
                <SfButton IsPrimary="true" OnClick="@GetWorkorders">조회</SfButton>
                <SfButton CssClass="e-danger" OnClick="@CreateLots">Lot생성 test</SfButton>
            </FLBX.Components.FxFilterButtons>

            <FxToast @ref="@toast" ToastTitle="Information" ToastTimeOut="3000" ToastContent="@ToastMessage"></FxToast>
        </div>
    </div>

</FLBX.Components.FxFilterGroup>

<FxSpinner @ref="@fxSpinner"></FxSpinner>
<FxDialog @ref="@dlgPop" PopupType="Constants.DialogType.Alert"></FxDialog>

<div class="row">
    <div class="col-lg-12 px-0">
        <div class="control_wrapper shadow mb-4" style="height: 620px;">
            <FxSplitContainer ContentsWidth="@(new string[]{"20%","10%","70%"})" SplitType="@FLBX.Constants.SplitContainerType.H3" cssClass="out-splitter py-3" width="100%" height="100%">

                <ChildContent1>
                    <SfGrid DataSource="@Workorders" Height="400px" RowHeight="30" AllowExcelExport="true" AllowPaging="true" AllowReordering="true" AllowFiltering="true">
                        <GridEvents RowSelected="RowSelectedHandler" TValue="TempModel"></GridEvents>
                        <GridColumns>
                            <GridColumn Field="WORKORDERID" IsPrimaryKey="true" HeaderText="ID" AllowResizing="true">
                                <Template>
                                    @{
                                        var wo = (context as TempModel);
                                        <SfTooltip Target="#txt">
                                            <TooltipTemplates>
                                                <Content>
                                                    <div id="txt">Qty : @wo.QTY</div>
                                                    <div id="txt">Product : @wo.PRODUCTDEFINITIONID</div>
                                                    <div id="txt">PO : @wo.PRODUCTORDERID</div>
                                                </Content>
                                            </TooltipTemplates>
                                            <span id="txt">@wo.WORKORDERID</span>
                                            <span id="txt"> (Name :@wo.WORKORDERNAME)</span>
                                        </SfTooltip>
                                    }
                                </Template>
                            </GridColumn>
                            @*<GridColumn Field="WORKORDERNAME" HeaderText="NAME" AutoFit="true"></GridColumn>
                                <GridColumn Field="QTY" HeaderText="QTY" AutoFit="true"></GridColumn>
                                <GridColumn Field="PRODUCTDEFINITIONID" HeaderText="PRODUCT" AutoFit="true"></GridColumn>
                                <GridColumn Field="PRODUCTORDERID" HeaderText="PO" AutoFit="true"></GridColumn>*@
                        </GridColumns>
                    </SfGrid>
                </ChildContent1>
                <ChildContent2>
                    <div class="p-2">
                        <SfTextBox Placeholder="WorkOrder" FloatLabelType="@FloatLabelType.Never" Value="@selectedWorkorderId"></SfTextBox>
                    </div>
                    <div class="p-2">
                        <SfTextBox Placeholder="잔여Qty" FloatLabelType="@FloatLabelType.Never" Readonly="true"></SfTextBox>
                    </div>
                    <div class="p-2">
                        <SfNumericTextBox @ref="spinLotCount" Format="(Lot개수) ###" TValue="double?" Value=10></SfNumericTextBox>
                    </div>
                    <div class="p-2">
                        <SfNumericTextBox @ref="spinLotQty" Format="(Lot별Qty) ###" TValue="double?" Value=10></SfNumericTextBox>
                    </div>
                    <div class="p-2">
                        <SfTextBox Placeholder="Prefix Keyword:" FloatLabelType="@FloatLabelType.Never"></SfTextBox>
                    </div>
                    <div class="p-2">
                        <SfTextBox Placeholder="Remark:" FloatLabelType="@FloatLabelType.Never"></SfTextBox>
                    </div>
                    <div class="p-2">
                        <SfTextBox Placeholder="Discription:" FloatLabelType="@FloatLabelType.Never"></SfTextBox>
                    </div>
                    <div class="p-2">
                        <SfButton IsPrimary="true" OnClick="@TemporaryCreateLot">Lot임시 생성</SfButton>
                    </div>
                </ChildContent2>
                <ChildContent3>
                    <SfGrid @ref="GridLot" DataSource="@Lots" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel","Search","Print","ExcelExport" })" AllowPaging="true" AllowExcelExport="true">
                        <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" AllowNextRowEdit="true" AllowEditOnDblClick="false" Mode="EditMode.Normal"></GridEditSettings>
                        <GridSelectionSettings CheckboxOnly="true"></GridSelectionSettings>
                        <GridColumns>
                            <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(Lot.Id) IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true, MinLength=8 })" HeaderText="LotId" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(Lot.Name) HeaderText="이름" TextAlign="TextAlign.Right" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(Lot.Qty) HeaderText="수량" EditType="EditType.NumericEdit" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(Lot.Segment) HeaderText="공정" EditType="EditType.DropDownEdit" Width="80">
                                <EditTemplate>
                                    <SfDropDownList ID="Segment" @bind-Value="@((context as DropDownModel).Name)" Placeholder="Process Segments.." TItem="DropDownModel" TValue="string" DataSource="@Segments">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(Lot.Equitment) HeaderText="설비" EditType="EditType.DropDownEdit" Width="80">
                                @*<EditTemplate>
                                    <SfDropDownList ID="Equipment" @bind-Value="@((context as DropDownModel).Name)" Placeholder="Process Segments.." TItem="DropDownModel" TValue="string" DataSource="@Equipments">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>*@
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                </ChildContent3>
            </FxSplitContainer>
        </div>
    </div>
</div>


@code {


    #region Components

    FxDateRangePicker filterDate;
    FxDropDown filterProduct;
    FxDropDown filterPo;
    FxTextBox filterWoName;
    SfNumericTextBox<double?> spinLotCount;
    SfNumericTextBox<double?> spinLotQty;
    FxToast toast;
    SfGrid<Lot> GridLot;
    FxDialog dlgPop;
    FxSpinner fxSpinner;

    #endregion

    DateTime StartDate = DateTime.Now.AddDays(-7);
    DateTime EndDate = DateTime.Now;

    IEnumerable<DropDownModel> Products { get; set; }
    static IEnumerable<DropDownModel> Segments { get; set; }
    static IEnumerable<DropDownModel> Equipments { get; set; }

    List<TempModel> Workorders { get; set; }
    List<Lot> Lots { get; set; }

    public string ToastMessage { get; set; }

    public string selectedWorkorderId { get; set; }

    public static List<Lot> LocalData = new List<Lot> {
            new Lot() { Segment = "setment01" },
            new Lot() { Segment = "setment02" },
            new Lot() { Segment = "setment03" }

    };


    void Attach(RenderHandle renderHandle) { }

    async Task SetParametersAsync(ParameterView parameters) { }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //Workorder 생산 시작일 필터

    }

    void filterDate_ValueChanged(RangeEventArgs args)
    {
        dlgPop.Show("Date",args.StartDate + " / " + args.EndDate);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        base.OnAfterRenderAsync(firstRender);

        //filter 초기값 입력
        if (firstRender)
        {
            await GetSegmentInfo();
            await GetEquipmentInfo();
            await GetProductInfo();
            this.filterProduct.sfDropDownList.AddItem(Products);

        }
    }

    private async Task GetProductInfo()
    {
        //Query Message 생성
        QueryMessage queryMessage = new QueryMessage()
        {
            QueryId = "GetProduct",
            QueryType = "Filter",
            QueryVersion = "001",
            SiteId = "A_10",
            ParameterKeyValue = new Dictionary<string, object>()

        };

        FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMessage, null, null);

        //Message Send
        var task1 = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
        await Task.WhenAll(task1);
        ReplyMessage reply = task1.Result;

        //Reply Message Binding
        Products = JsonSerializer.Deserialize<IEnumerable<DropDownModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
    }

    private async Task GetSegmentInfo()
    {
        //Query Message 생성
        QueryMessage queryMessage = new QueryMessage()
        {
            QueryId = "GetProcessSegment",
            QueryType = "Filter",
            QueryVersion = "001",
            SiteId = "A_10",
            ParameterKeyValue = new Dictionary<string, object>()

        };

        FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMessage, null, null);

        //Message Send
        var task1 = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
        await Task.WhenAll(task1);
        ReplyMessage reply = task1.Result;

        //Reply Message Binding
        Segments = JsonSerializer.Deserialize<IEnumerable<DropDownModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
    }

    private async Task GetEquipmentInfo()
    {
        //Query Message 생성
        QueryMessage queryMessage = new QueryMessage()
        {
            QueryId = "GetEquipment",
            QueryType = "Filter",
            QueryVersion = "001",
            SiteId = "A_10",
            ParameterKeyValue = new Dictionary<string, object>()

        };

        FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMessage, null, null);

        //Message Send
        var task1 = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
        await Task.WhenAll(task1);
        ReplyMessage reply = task1.Result;

        //Reply Message Binding
        Equipments = JsonSerializer.Deserialize<IEnumerable<DropDownModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
    }

    /// <summary>
    /// GetWorkorder
    /// </summary>
    /// <param name="arg"></param>
    /// <returns></returns>
    private async Task GetWorkorders(MouseEventArgs arg)
    {
        //Parmeter 생성
        Dictionary<string, object> param = new Dictionary<string, object>();
        param.Add("from", filterDate.sfDateRangePicker.StartDate.Value.ToString("yyyy-MM-dd"));
        param.Add("to", filterDate.sfDateRangePicker.EndDate.Value.ToString("yyyy-MM-dd"));
        param.Add("product", filterProduct.sfDropDownList.GetItems().FirstOrDefault<DropDownModel>().Id);

        string msg = $"Product : {param["product"].ToString()}";

        var toastModel = new ToastModel { Title = "Information!", Content = msg, CssClass = "e-toast-info", Icon = "e-info toast-icons" };
        toast.fxToast.Show(toastModel);



        //Query Message 생성
        QueryMessage queryMessage = new QueryMessage()
        {
            QueryId = "GetWorkorder",
            QueryType = "Inquiry",
            QueryVersion = "001",
            SiteId = "A_10",
            //ParameterKeyValue = new Dictionary<string, object>() { { "from", "2020-11-01 06:00:00" }, { "to", "2020-11-02 06:00:00" } }
            ParameterKeyValue = param
        };

        FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMessage, null, null);

        //Message Send
        var task = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
        await Task.WhenAll(task);
        ReplyMessage reply = task.Result;

        //Reply Message Binding
        Workorders = JsonSerializer.Deserialize<List<TempModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
    }

    void RowSelectedHandler(RowSelectEventArgs<TempModel> arg)
    {
        selectedWorkorderId = arg.Data.WORKORDERID;
    }

    void TemporaryCreateLot(MouseEventArgs arg)
    {
        Lots = new List<Lot>();

        int count = Convert.ToInt32(spinLotCount.Value);
        int qty = Convert.ToInt32(spinLotQty.Value);
        for (int i = 0; i < count; i++)
        {
            Lot newLot = new Lot();
            newLot.Id = Guid.NewGuid().ToString();
            newLot.Name = newLot.Id.Substring(0, 4) + i.ToString();
            newLot.Qty = qty;
            newLot.Segment = "701";

            Lots.Add(newLot);
        }
    }

    async Task CreateLots(MouseEventArgs arg)
    {
        await fxSpinner.Show();
        await Task.Delay(2000);

        try
        {
            //Parmeter 생성

            List<Lot> selectedLot = GridLot.GetSelectedRecords().Result;

            Dictionary<string, object> param = new Dictionary<string, object>();
            param.Add("lot", selectedLot);

            RuleMessage ruleMessage = new RuleMessage()
            {
                RuleName = "CreateLot",
                ParmeterKeyValues = param
            };

            FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, null, ruleMessage, null);

            //Message Send
            var task = messageService.SendMessageAsync("Product", "/api/CreateLot/CreateLot", messageSet);
            await Task.WhenAll(task);
            ReplyMessage reply = task.Result;

            //Reply Message Binding
            string replyMessage = Convert.ToString(reply.ResultKeyValues["reply"]);

            var msg = $"Create Lot : {replyMessage} ea";

            await fxSpinner.Show();
            dlgPop.Show("Information", msg);
            //await toast.fxToast.Show();
        }
        catch (Exception ex)
        {
            dlgPop.Show("Error", ex.Message);
        }
        finally
        {
            await fxSpinner.Hide();
        }



    }

    class TempModel
    {
        public string WORKORDERID { get; set; }
        public string WORKORDERNAME { get; set; }
        public float QTY { get; set; }
        public string PRODUCTDEFINITIONID { get; set; }
        public string PRODUCTORDERID { get; set; }

    }

}
