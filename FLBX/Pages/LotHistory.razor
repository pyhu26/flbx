@implements Microsoft.AspNetCore.Components.IComponent
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Layouts
@using FLBX.Components
@using FLBX.Models
@using System.Text.Json
@inject FxUtil fxUtil
@inject MessageService messageService
@*@inherits M0001*@
@*TOP Menu  *@


<FLBX.Components.FxFilterGroup>

    <div class="row">
        <FxDateTimePicker @ref="filterFrom" MinDateTime=" DateTime.Now.AddDays(-14)" MaxDateTime="DateTime.Now.AddDays(1)" MediumColSpanValue="3" Placeholder="생산시작일"></FxDateTimePicker>
        <FxDateTimePicker @ref="filterTo" MinDateTime=" DateTime.Now.AddDays(-14)" MaxDateTime="DateTime.Now.AddDays(1)" MediumColSpanValue="3" Placeholder="생산종료일"></FxDateTimePicker>
        <FxTextBox MediumColSpanValue="3" Placeholder="Lot Id검색:"></FxTextBox>
        <FxTextBox MediumColSpanValue="3" Placeholder="Lot이름검색:"></FxTextBox>
    </div>

    <div class="row d-flex justify-content-end">
        <div class="p-2">
            <FLBX.Components.FxFilterButtons>
                <SfButton @ref="btnQuery" OnClick="@btnQuery_OnClickAsync" IsPrimary="true">조회</SfButton>
            </FLBX.Components.FxFilterButtons>
        </div>
    </div>

</FLBX.Components.FxFilterGroup>
    @*TOP Menu -End- *@


    @*Main  Content *@
    <div class="row">
        <div class="col-lg-12 px-0">
            <div class="control_wrapper shadow mb-4" style="height: 615px;">

                <FxSplitContainer ContentsWidth="@(new string[]{"40%","60%"})" SplitType="@FLBX.Constants.SplitContainerType.H2" Title1="Lot Group by WorkOrder" Title2="Lot History"cssClass="out-splitter py-3" width="100%" height="100%">
                    <ChildContent1>
                        <SfGrid DataSource="@Workorders" AllowGrouping="true" AllowPaging="true" AllowTextWrap="true" AllowRowDragAndDrop="true" AllowResizing="true" AllowReordering="true" AllowFiltering="true" AllowSelection="true">
                            <GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>
                            <GridEvents RowSelected="RowSelectHander" TValue="TempModel"></GridEvents>
                            <GridColumns>
                                <GridColumn Field="WORKORDERID" IsPrimaryKey="true" HeaderText="WORKORDERID" Width="100"></GridColumn>
                                <GridColumn Field="WORKORDERNAME" HeaderText="NAME" TextAlign="TextAlign.Right" Width="50"></GridColumn>
                                <GridColumn Field="QTY" HeaderText="QTY" Width="50"></GridColumn>
                                <GridColumn Field="PRODUCTDEFINITIONID" HeaderText="PRODUCT" Width="80"></GridColumn>
                                <GridColumn Field="PRODUCTORDERID" HeaderText="PO" Width="80"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </ChildContent1>
                  
                    <ChildContent2>
                        <SfGrid DataSource="@LotHist" AllowGrouping="true" AllowPaging="true" AllowTextWrap="true" AllowRowDragAndDrop="true" AllowResizing="true" AllowReordering="true" AllowFiltering="true">
                            <GridColumns>
                                <GridColumn Field="LOTID" IsPrimaryKey="true" HeaderText="LotId" Width="100"></GridColumn>
                                <GridColumn Field="LOTNAME" HeaderText="이름" TextAlign="TextAlign.Right" Width="50"></GridColumn>
                                <GridColumn Field="QTY" HeaderText="수량" Width="50"></GridColumn>
                                <GridColumn Field="PROCESSSEGMENTID" HeaderText="공정" Width="80"></GridColumn>
                                <GridColumn Field="EQUIPMENTID" HeaderText="설비" Width="80"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </ChildContent2>                                             
                </FxSplitContainer>
            </div>
        </div>
    </div>

    @*Main  Content End *@

    @code {
        FxDateTimePicker filterFrom;
        FxDateTimePicker filterTo;
        FxTextBox filterLotId;
        FxTextBox filterLotName;


        void Attach(RenderHandle renderHandle) { }
        List<TempModel> Workorders { get; set; } = new List<TempModel>();
        List<TempLotHistModel> LotHist { get; set; } = new List<TempLotHistModel>();
        public SfButton btnQuery;
        public List<WorkOrderDetails> GridData { get; set; }
        public List<Lot> GridDataLot { get; set; }
        public string[] GroupedColumns = new string[] { "WORKORDERID" };
        [Parameter]
        public DateTime? From { get; set; }
        [Parameter]
        public DateTime? To { get; set; }
        [Parameter]
        public string LotId { get; set; }
        [Parameter]
        public string LotName { get; set; }
        protected override void OnInitialized()
        {
            //GridData = WorkOrderDetails.GetAllRecords();
            //GridDataLot = Lot.GetAllRecords();

        }
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {

            base.OnAfterRenderAsync(firstRender);

            //filter 초기값 입력
            if (firstRender)
            {
                //Workorder 생산 시작일 필터
                filterFrom.DateTimeValue = DateTime.Now.AddDays(-14);
                filterTo.DateTimeValue = DateTime.Now;


                StateHasChanged();
            }
        }
        public async Task btnQuery_OnClickAsync()
        {
            //Parmeter 생성
            Dictionary<string, object> param = new Dictionary<string, object>();
            param.Add("from", filterFrom.DateTimeValue);
            param.Add("to", filterTo.DateTimeValue);
            //Query Message 생성
            QueryMessage queryMeasage = new QueryMessage()
            {
                QueryId = "GetWorkorder",
                QueryType = "Inquiry",
                QueryVersion = "001",
                SiteId = "A_10",
                ParameterKeyValue = param
            };

            FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMeasage, null, null);

            //Message Send
            var task = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
            await Task.WhenAll(task);
            ReplyMessage reply = task.Result;

            //Reply Message Binding
            this.Workorders = JsonSerializer.Deserialize<List<TempModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
        }

        private async Task RowSelectHander(RowSelectEventArgs<TempModel> args)
        {
            //Todo lothisttory query
            //Query Message 생성
            QueryMessage queryMeasage = new QueryMessage()
            {
                QueryId = "GetLotHistory",
                QueryType = "Inquiry",
                QueryVersion = "002",
                SiteId = "A_10",
                ParameterKeyValue = new Dictionary<string, object>() { { "workorder", args.Data.WORKORDERID } }
            };

            FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMeasage, null, null);

            //Message Send
            var task = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
            await Task.WhenAll(task);
            ReplyMessage reply = task.Result;

            //Reply Message Binding
            this.LotHist = JsonSerializer.Deserialize<List<TempLotHistModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
        }
        class TempModel
        {
            public string WORKORDERID { get; set; }
            public string WORKORDERNAME { get; set; }
            public float QTY { get; set; }
            public string PRODUCTDEFINITIONID { get; set; }
            public string PRODUCTORDERID { get; set; }

        }
        class TempLotHistModel
        {
            public string LOTID { get; set; }
            public string LOTNAME { get; set; }
            public float? QTY { get; set; }
            public string PROCESSSEGMENTID { get; set; }
            public string EQUIPMENTID { get; set; }

        }

    }
