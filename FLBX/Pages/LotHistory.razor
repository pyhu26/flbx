@implements Microsoft.AspNetCore.Components.IComponent
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Layouts
@using FLBX.Components
@using FLBX.Models
@using System.Text.Json
@inject FxUtil fxUtil
@inject MessageService messageService
@*@inherits M0001*@
@*TOP Menu  *@


<FLBX.Components.FxFilterGroup>

    <div class="row">
        <FxDateTimePicker @ref="filterFrom" DateTimeValue="@DateValueFrom" DateFormat="'From : 'yyyy-MM-dd hh:mm:ss" MediumColSpanValue="3" Placeholder="생산시작일" DateTimeChanged="filterDateFrom_ValueChanged"></FxDateTimePicker>
        <FxDateTimePicker @ref="filterTo" DateTimeValue="@DateValueTo" DateFormat="'To : 'yyyy-MM-dd hh:mm:ss" MediumColSpanValue="3" Placeholder="생산종료일" DateTimeChanged="filterDateTo_ValueChanged"></FxDateTimePicker>
        @*<FxDropDown @ref="@filterWorkOrder" DataSourceValue="@Workorders" MediumColSpanValue="3" Placeholder="Work Order"></FxDropDown>*@
    <div class="col-md-3">
        <SfDropDownList @ref="sfdrop" TValue="string" Placeholder="Work Order" TItem="DropDownModel" @bind-Value="@workorderid" DataSource="@Workorders">
            <DropDownListFieldSettings Value="Id"></DropDownListFieldSettings>
        </SfDropDownList>
        @*<SfDropDownList TValue="string" Placeholder="e.g. Australia" TItem="Countries" @bind-Value="@DropVal" DataSource="@Country">
            <DropDownListFieldSettings Value="Name"></DropDownListFieldSettings>
        </SfDropDownList>*@
    </div>
            <FxTextBox @ref="filterLotId" MediumColSpanValue="3" Placeholder="Lot Id검색:"></FxTextBox>
            <FxTextBox @ref="filterLotName" MediumColSpanValue="3" Placeholder="Lot이름검색:"></FxTextBox>
            @*<SfTextBox Placeholder="Lot Id검색" FloatLabelType="@FloatLabelType.Never"  @bind-Value="@LotId"/>
            <SfTextBox Placeholder="Lot 이름검색" FloatLabelType="@FloatLabelType.Never" @bind-Value="@LotName"/>*@
        </div>

        <div class="row d-flex justify-content-end">
            <div class="p-2">
                <FLBX.Components.FxFilterButtons>
                    <SfButton @ref="btnQuery" OnClick="@btnQuery_OnClickAsync" IsPrimary="true">조회</SfButton>
                </FLBX.Components.FxFilterButtons>
                <FxToast @ref="@toast" ToastTitle="Information" ToastTimeOut="3000" ToastContent="@ToastMessage"></FxToast>
            </div>
        </div>

</FLBX.Components.FxFilterGroup>
    @*TOP Menu -End- *@

<FxSpinner @ref="@fxSpinner"></FxSpinner>
<FxDialog @ref="@dlgPop" PopupType="Constants.DialogType.Alert"></FxDialog>

    @*Main  Content *@
    <div class="row">
        <div class="col-lg-12 px-0">
            <div class="control_wrapper shadow mb-4" style="height: 615px;">

                <FxSplitContainer ContentsWidth="@(new string[]{"40%","60%"})" SplitType="@FLBX.Constants.SplitContainerType.H2" Title1="Lot Group by WorkOrder" Title2="Lot History"cssClass="out-splitter py-3" width="100%" height="100%">
                    <ChildContent1>
                        <SfGrid DataSource="@LotList"   AllowGrouping="true" AllowPaging="true" AllowTextWrap="true"  AllowResizing="true" AllowReordering="true" AllowFiltering="true" AllowSelection="true">
                            <GridGroupSettings @ref="gridGroup" Columns="@GroupedColumns" ></GridGroupSettings>
                            <GridEvents RowSelected="RowSelectHander" TValue="TempLotModel"></GridEvents>
                            <GridColumns>
                                <GridColumn Field="LOTID" IsPrimaryKey="true"HeaderText="LOT ID" TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                                <GridColumn Field="WORKORDERID" IsPrimaryKey="true" HeaderText="WORKORDER ID" Width="100" AutoFit="true"></GridColumn>
                                <GridColumn Field="STATE" HeaderText="State" Width="80"></GridColumn>
                               
                            </GridColumns>
                        </SfGrid>
                    </ChildContent1>
                  
                    <ChildContent2>
                        <SfGrid DataSource="@LotHist"  AllowPaging="true" AllowTextWrap="true" AllowResizing="true" AllowReordering="true" AllowFiltering="true">
                            <GridColumns>
                                <GridColumn Field="LOTID" IsPrimaryKey="true" HeaderText="Lot Id" Width="100" AutoFit="true"></GridColumn>
                                <GridColumn Field="LOTNAME" HeaderText="Lot Name"  Width="50" AutoFit="true"></GridColumn>
                                <GridColumn Field="WORKORDERID" HeaderText="Lot Name"  Width="50" AutoFit="true"></GridColumn>
                                <GridColumn Field="STATE" HeaderText="State" Width="50" AutoFit="true"></GridColumn>
                                <GridColumn Field="QTY" HeaderText="Qty" Width="50" AutoFit="true"></GridColumn>
                                <GridColumn Field="PRODUCTDEFINITIONID" HeaderText="Product Id" Width="80" AutoFit="true"></GridColumn>
                                <GridColumn Field="PROCESSDEFINITIONID" HeaderText="Process Id" Width="80" AutoFit="true"></GridColumn>
                                <GridColumn Field="PROCESSSEGMENTID" HeaderText="Segment Id" Width="80" AutoFit="true"></GridColumn>
                                <GridColumn Field="MODIFYTIME" HeaderText="Modify Time" Width="80" AutoFit="true"></GridColumn>
                                <GridColumn Field="EQUIPMENTID" HeaderText="Equitment Id" Width="80" AutoFit="true"></GridColumn>
                                <GridColumn Field="EQUIPMENTNAME" HeaderText="Equitment Name" Width="80" AutoFit="true"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </ChildContent2>                                             
                </FxSplitContainer>
            </div>
        </div>
    </div>

    @*Main  Content End *@

    @code {

        public string workorderid;

        //        public class Countries
        //        {
        //            public string Name { get; set; }

        //            public string Code { get; set; }
        //        }

        //        List<Countries> Country = new List<Countries>
        //{
        //        new Countries() { Name = "Australia", Code = "AU" },
        //        new Countries() { Name = "Bermuda", Code = "BM" },
        //        new Countries() { Name = "Canada", Code = "CA" },
        //        new Countries() { Name = "Cameroon", Code = "CM" },
        //    };



        GridGroupSettings gridGroup;

        public DateTime? DateValueFrom { get; set; } = DateTime.Now.AddDays(-21);

        public DateTime? DateValueTo { get; set; } = DateTime.Now;
        SfDropDownList<string,DropDownModel> sfdrop;
        FxDateTimePicker filterFrom;
        FxDateTimePicker filterTo;
        FxTextBox filterLotId;
        FxTextBox filterLotName;
        FxToast toast;
        FxDialog dlgPop;
        FxSpinner fxSpinner;
        FxDropDown filterWorkOrder;

        static List<DropDownModel> Workorders { get; set; } = new List<DropDownModel>();
        void Attach(RenderHandle renderHandle) { }
        List<TempLotModel> LotList { get; set; } = new List<TempLotModel>();
        List<TempLotHistModel> LotHist { get; set; } = new List<TempLotHistModel>();
        public SfButton btnQuery;

        public string[] GroupedColumns = new string[] { "WORKORDERID" };
        [Parameter]
        public DateTime? From { get; set; }
        [Parameter]
        public DateTime? To { get; set; }
        [Parameter]
        public string LotId { get; set; } = "";
        [Parameter]
        public string LotName { get; set; } = "";
        public string ToastMessage { get; set; }


        protected override void OnInitialized()
        {

            base.OnInitialized();

        }

        public async Task InitializePage()
        {
            Workorders.Clear();
            LotList.Clear();
            LotHist.Clear();
            await GetWorkorders();
        }
        async Task filterDateFrom_ValueChanged(ChangedEventArgs<DateTime?> args)
        {
            //  dlgPop.Show("DateTime", args.Value.ToString());
            DateValueFrom = args.Value;
            await GetWorkorders();




        }
        async Task filterDateTo_ValueChanged(ChangedEventArgs<DateTime?> args)
        {
            //  dlgPop.Show("DateTime", args.Value.ToString());
            DateValueTo = args.Value;
            await GetWorkorders();




        }
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {

            base.OnAfterRenderAsync(firstRender);

            //filter 초기값 입력
            if (firstRender)
            {

                //Workorder 필터
                await GetWorkorders();
                //this.filterWorkOrder.sfDropDownList.AddItem(Workorders);
                //sfdrop.AddItem(Workorders);
                StateHasChanged();
            }
        }

        private async Task GetWorkorders()
        {
            Workorders.Clear();
            Dictionary<string, object> param = new Dictionary<string, object>();
            param.Add("from", filterFrom.sfDateTimePicker.Value?.ToString("yyyy-MM-dd hh:mm:ss"));
            param.Add("to", filterTo.sfDateTimePicker.Value?.ToString("yyyy-MM-dd hh:mm:ss"));

            //Query Message 생성
            QueryMessage queryMessage = new QueryMessage()
            {
                QueryId = "GetWorkOrderDp",
                QueryType = "Filter",
                QueryVersion = "001",
                SiteId = "A_10",
                ParameterKeyValue = param

            };

            FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMessage, null, null);

            //Message Send
            var task = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
            await Task.WhenAll(task);
            ReplyMessage reply = task.Result;

            //Reply Message Binding
            Workorders = JsonSerializer.Deserialize<List<DropDownModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
        }

        public async Task btnQuery_OnClickAsync()
        {
            //Parmeter 생성
            Dictionary<string, object> param = new Dictionary<string, object>();
            param.Add("from", filterFrom.sfDateTimePicker.Value?.ToString("yyyy-MM-dd hh:mm:ss"));
            param.Add("to", filterTo.sfDateTimePicker.Value?.ToString("yyyy-MM-dd hh:mm:ss"));
            var lotid = filterLotId.fxTextBox.Value;
            var lotname = filterLotName.fxTextBox.Value;
            if (String.IsNullOrEmpty(lotid))
                lotid = " ";
            param.Add("lotid", lotid);
            if (String.IsNullOrEmpty(lotname))
                lotname = " ";
            param.Add("lotname", lotname);
            if (String.IsNullOrEmpty(workorderid))
                workorderid = " ";
            param.Add("workorderid", workorderid);
            //Query Message 생성
            QueryMessage queryMeasage = new QueryMessage()
            {
                QueryId = "GetLotHistory",
                QueryType = "Inquiry",
                QueryVersion = "001",
                SiteId = "A_10",
                ParameterKeyValue = param
            };

            FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMeasage, null, null);

            //Message Send
            var task = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
            await Task.WhenAll(task);
            ReplyMessage reply = task.Result;

            //Reply Message Binding
            this.LotList = JsonSerializer.Deserialize<List<TempLotModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
        }

        private async Task RowSelectHander(RowSelectEventArgs<TempLotModel> args)
        {
            //Todo lothisttory query
            //Query Message 생성
            QueryMessage queryMeasage = new QueryMessage()
            {
                QueryId = "GetLotHistoryDetail",
                QueryType = "Inquiry",
                QueryVersion = "001",
                SiteId = "A_10",
                ParameterKeyValue = new Dictionary<string, object>() { { "lotid", args.Data.LOTID } }
            };

            FLMessageSet messageSet = messageService.CreateMessageSet(MeesageType.Query, queryMeasage, null, null);

            //Message Send
            var task = messageService.SendMessageAsync("Product", "/query/executequery", messageSet);
            await Task.WhenAll(task);
            ReplyMessage reply = task.Result;

            //Reply Message Binding
            this.LotHist = JsonSerializer.Deserialize<List<TempLotHistModel>>(Convert.ToString(reply.ResultKeyValues["reply"]));
        }
        class TempLotModel
        {
            public string WORKORDERID { get; set; }
            public string LOTID { get; set; }
            public string STATE { get; set; }


        }
        class TempLotHistModel
        {
            public string LOTID { get; set; }
            public string LOTNAME { get; set; }
            public string WORKORDERID { get; set; }
            public string STATE { get; set; }
            public float? QTY { get; set; }
            public string PRODUCTDEFINITIONID { get; set; }
            public string PROCESSDEFINITIONID { get; set; }
            public string PROCESSSEGMENTID { get; set; }
            public DateTime MODIFYTIME { get; set; }
            public string EQUIPMENTID { get; set; }
            public string EQUIPMENTNAME { get; set; }

        }

    }
